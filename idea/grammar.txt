program => statement* EOF


# statements
statement => exprStmt
           | varDecl
           | fnDecl
           | useStmt

varDecl => "var" IDENTIFIER ("=" expr )? ( "," IDENTIFIER ("=" expr )? )* ";"
fnDecl => "fn" IDENTIFIER function
useStmt => "use" IDENTIFIER ( "." ( ( "{" ( IDENTIFIER "," )* IDENTIFIER "}" ) | IDENTIFIER | "*" ) ) ";"

exprStmt => exprNoOp ";" | exprLike
exprLike => block
          | ifExpr
          | whileExpr
          | dowhileExpr
          | forExpr
          | breakExpr
          | continueExpr
          | returnExpr

expr => exprLike | exprNoOp

ifExpr => "if" expr block ( "elif" expr block )* ( "else" block )?

whileExpr => "while" expr? block
dowhileExpr => "do" block "while" expr ";"
forExpr => "for" "(" IDENTIFIER "in" expr ")" block ( "else" block )?

breakExpr => "break" expr? ";"
continueExpr => "continue" ";"
returnExpr => "return" expr? ";"


# expressions
exprNoOp => range
range => ternary ( ( ".." | ".=" ) ternary )?

ternary => assignment ( "?" expr ":" expr )?
assignment => ( ( assignment_target ) ( "=" | "+=" | "-=" | "*=" | "/=" | "**=" | "%=" ) assignment ) | or
assignment_target = expr

or => and ( "or" and )*
and => equality ( "and" equality )*

equality => comparison ( ( "==" | "!=" ) comparison )*
comparison => addition ( ( ">" | "<" | ">=" | "<=" ) addition )*

addition => times ( ( "-" | "+" ) times )*
times => unary ( ( "*" | "/" | "%" ) unary )*

unary => ( ( "!" | "-" ) unary ) | call
call => primary ( "(" args? ")" | "[" expr "]" | "." IDENTIFIER )*

primary => NUMBER
         | STRING
         | IDENTIFIER
         | "true"
         | "false"
         | "nil"
         | "(" expr ")"
         | array
         | maps
         | exprLike

block => "{" statement* "}"
array => "[" ( expr "," )* ( expr )? "]"
maps => "{{" ( expr ":" expr? "," )* ( expr ":" expr? )? "}}"

args => expr ( "," expr )* ( IDENTIFIER "=" expr ( "," IDENTIFIER "=" expr )* )?
params => IDENTIFIER ( "," IDENTIFIER )* ( IDENTIFIER "=" expr ( "," IDENTIFIER "=" expr )* )?

function => "(" params? ")" block


IDENTIFIER => [ _ a-z A-Z ]? [ _ a-z A-Z 0-9 ]*
NUMBER => [ 0-9 _ ]+ ( "." [ 0-9 _ ]+ )?
STRING => ( "\"" ( [ ^"\"" ]+ ) "\"" ) | ( "'" ( [ ^"'" ]+ ) "'" ) | ( "`"+ ( [ ^"`"+ ]+ ) "`"+ )
";" => SEMICOLON | RIGHT_BRACE | EOF